name: E2E Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.24.2'
  TEST_DATABASE_DSN: 'postgres://postgres:testpass@localhost:5432/resource_test?sslmode=disable'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: resource_test
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Setup test database
        run: |
          PGPASSWORD=testpass psql -h localhost -U postgres -d resource_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        continue-on-error: true

      - name: Run database migrations
        run: |
          if [ -d "migrations" ]; then
            echo "Running database migrations..."
            # Add migration runner here if available
            # For now, assume tables will be created by the application
          fi

      - name: Build application
        run: |
          go build -o resource-server ./cmd/api

      - name: Run unit tests first
        run: |
          go test -v -race -coverprofile=unit_coverage.out ./internal/...

      - name: Start test server in background
        run: |
          export TEST_DATABASE_DSN="${{ env.TEST_DATABASE_DSN }}"
          ./resource-server &
          echo $! > server.pid
          sleep 5

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8081/api/v1/health; do sleep 1; done'

      - name: Run E2E tests
        run: |
          go test -v -race -coverprofile=e2e_coverage.out -tags=e2e ./test/e2e/...
        env:
          TEST_DATABASE_DSN: ${{ env.TEST_DATABASE_DSN }}

      - name: Stop test server
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Combine coverage reports
        run: |
          go install github.com/wadey/gocovmerge@latest
          gocovmerge unit_coverage.out e2e_coverage.out > total_coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./total_coverage.out
          flags: e2e
          name: e2e-coverage

      - name: Generate coverage report
        run: |
          go tool cover -html=total_coverage.out -o coverage.html
          go tool cover -func=total_coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.html

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=total_coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70.0" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below threshold of 70%"
            exit 1
          fi

      - name: Run performance tests
        run: |
          go test -v -run=TestWorkflow_ConcurrentOperations -tags=e2e,performance ./test/e2e/workflows_test.go
        continue-on-error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    strategy:
      matrix:
        provider: [r2, gcs, cdn]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run provider-specific tests
        run: |
          go test -v -run=TestWorkflow_CrossProvider -tags=e2e ./test/e2e/workflows_test.go
        env:
          TEST_PROVIDER: ${{ matrix.provider }}
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  performance-baseline:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: resource_test
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build application
        run: go build -o resource-server ./cmd/api

      - name: Run benchmark tests
        run: |
          go test -v -bench=. -benchmem -run=^$ -tags=e2e,performance ./test/e2e/... > benchmark_results.txt
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark_results.txt